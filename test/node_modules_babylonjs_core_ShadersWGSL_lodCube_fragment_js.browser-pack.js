"use strict";
(self["webpackChunkab2ac"] = self["webpackChunkab2ac"] || []).push([["node_modules_babylonjs_core_ShadersWGSL_lodCube_fragment_js"],{

/***/ "./node_modules/@babylonjs/core/ShadersWGSL/lodCube.fragment.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babylonjs/core/ShadersWGSL/lodCube.fragment.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   lodCubePixelShaderWGSL: () => (/* binding */ lodCubePixelShaderWGSL)
/* harmony export */ });
/* harmony import */ var _Engines_shaderStore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Engines/shaderStore.js */ "./node_modules/@babylonjs/core/Engines/shaderStore.js");
// Do not edit.

const name = "lodCubePixelShader";
const shader = `const GammaEncodePowerApprox=1.0/2.2;varying vUV: vec2f;var textureSamplerSampler: sampler;var textureSampler: texture_cube<f32>;uniform lod: f32;uniform gamma: i32;@fragment
fn main(input: FragmentInputs)->FragmentOutputs {let uv=fragmentInputs.vUV*2.0-1.0;
#ifdef POSITIVEX
fragmentOutputs.color=textureSampleLevel(textureSampler,textureSamplerSampler,vec3f(1.001,uv.y,uv.x),uniforms.lod);
#endif
#ifdef NEGATIVEX
fragmentOutputs.color=textureSampleLevel(textureSampler,textureSamplerSampler,vec3f(-1.001,uv.y,uv.x),uniforms.lod);
#endif
#ifdef POSITIVEY
fragmentOutputs.color=textureSampleLevel(textureSampler,textureSamplerSampler,vec3f(uv.y,1.001,uv.x),uniforms.lod);
#endif
#ifdef NEGATIVEY
fragmentOutputs.color=textureSampleLevel(textureSampler,textureSamplerSampler,vec3f(uv.y,-1.001,uv.x),uniforms.lod);
#endif
#ifdef POSITIVEZ
fragmentOutputs.color=textureSampleLevel(textureSampler,textureSamplerSampler,vec3f(uv,1.001),uniforms.lod);
#endif
#ifdef NEGATIVEZ
fragmentOutputs.color=textureSampleLevel(textureSampler,textureSamplerSampler,vec3f(uv,-1.001),uniforms.lod);
#endif
if (uniforms.gamma==0) {fragmentOutputs.color=vec4f(pow(fragmentOutputs.color.rgb,vec3f(GammaEncodePowerApprox)),fragmentOutputs.color.a);}}
`;
// Sideeffect
if (!_Engines_shaderStore_js__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStoreWGSL[name]) {
    _Engines_shaderStore_js__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStoreWGSL[name] = shader;
}
/** @internal */
const lodCubePixelShaderWGSL = { name, shader };
//# sourceMappingURL=lodCube.fragment.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2JhYnlsb25qc19jb3JlX1NoYWRlcnNXR1NMX2xvZEN1YmVfZnJhZ21lbnRfanMuYnJvd3Nlci1wYWNrLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDd0Q7QUFDeEQ7QUFDQSxxREFBcUQsbUJBQW1CLG1DQUFtQyxzQ0FBc0MsaUJBQWlCLG1CQUFtQjtBQUNyTCxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxLQUFLLGdFQUFXO0FBQ2hCLElBQUksZ0VBQVc7QUFDZjtBQUNBO0FBQ08saUNBQWlDO0FBQ3hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWIyYWMvLi9ub2RlX21vZHVsZXMvQGJhYnlsb25qcy9jb3JlL1NoYWRlcnNXR1NML2xvZEN1YmUuZnJhZ21lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRG8gbm90IGVkaXQuXG5pbXBvcnQgeyBTaGFkZXJTdG9yZSB9IGZyb20gXCIuLi9FbmdpbmVzL3NoYWRlclN0b3JlLmpzXCI7XG5jb25zdCBuYW1lID0gXCJsb2RDdWJlUGl4ZWxTaGFkZXJcIjtcbmNvbnN0IHNoYWRlciA9IGBjb25zdCBHYW1tYUVuY29kZVBvd2VyQXBwcm94PTEuMC8yLjI7dmFyeWluZyB2VVY6IHZlYzJmO3ZhciB0ZXh0dXJlU2FtcGxlclNhbXBsZXI6IHNhbXBsZXI7dmFyIHRleHR1cmVTYW1wbGVyOiB0ZXh0dXJlX2N1YmU8ZjMyPjt1bmlmb3JtIGxvZDogZjMyO3VuaWZvcm0gZ2FtbWE6IGkzMjtAZnJhZ21lbnRcbmZuIG1haW4oaW5wdXQ6IEZyYWdtZW50SW5wdXRzKS0+RnJhZ21lbnRPdXRwdXRzIHtsZXQgdXY9ZnJhZ21lbnRJbnB1dHMudlVWKjIuMC0xLjA7XG4jaWZkZWYgUE9TSVRJVkVYXG5mcmFnbWVudE91dHB1dHMuY29sb3I9dGV4dHVyZVNhbXBsZUxldmVsKHRleHR1cmVTYW1wbGVyLHRleHR1cmVTYW1wbGVyU2FtcGxlcix2ZWMzZigxLjAwMSx1di55LHV2LngpLHVuaWZvcm1zLmxvZCk7XG4jZW5kaWZcbiNpZmRlZiBORUdBVElWRVhcbmZyYWdtZW50T3V0cHV0cy5jb2xvcj10ZXh0dXJlU2FtcGxlTGV2ZWwodGV4dHVyZVNhbXBsZXIsdGV4dHVyZVNhbXBsZXJTYW1wbGVyLHZlYzNmKC0xLjAwMSx1di55LHV2LngpLHVuaWZvcm1zLmxvZCk7XG4jZW5kaWZcbiNpZmRlZiBQT1NJVElWRVlcbmZyYWdtZW50T3V0cHV0cy5jb2xvcj10ZXh0dXJlU2FtcGxlTGV2ZWwodGV4dHVyZVNhbXBsZXIsdGV4dHVyZVNhbXBsZXJTYW1wbGVyLHZlYzNmKHV2LnksMS4wMDEsdXYueCksdW5pZm9ybXMubG9kKTtcbiNlbmRpZlxuI2lmZGVmIE5FR0FUSVZFWVxuZnJhZ21lbnRPdXRwdXRzLmNvbG9yPXRleHR1cmVTYW1wbGVMZXZlbCh0ZXh0dXJlU2FtcGxlcix0ZXh0dXJlU2FtcGxlclNhbXBsZXIsdmVjM2YodXYueSwtMS4wMDEsdXYueCksdW5pZm9ybXMubG9kKTtcbiNlbmRpZlxuI2lmZGVmIFBPU0lUSVZFWlxuZnJhZ21lbnRPdXRwdXRzLmNvbG9yPXRleHR1cmVTYW1wbGVMZXZlbCh0ZXh0dXJlU2FtcGxlcix0ZXh0dXJlU2FtcGxlclNhbXBsZXIsdmVjM2YodXYsMS4wMDEpLHVuaWZvcm1zLmxvZCk7XG4jZW5kaWZcbiNpZmRlZiBORUdBVElWRVpcbmZyYWdtZW50T3V0cHV0cy5jb2xvcj10ZXh0dXJlU2FtcGxlTGV2ZWwodGV4dHVyZVNhbXBsZXIsdGV4dHVyZVNhbXBsZXJTYW1wbGVyLHZlYzNmKHV2LC0xLjAwMSksdW5pZm9ybXMubG9kKTtcbiNlbmRpZlxuaWYgKHVuaWZvcm1zLmdhbW1hPT0wKSB7ZnJhZ21lbnRPdXRwdXRzLmNvbG9yPXZlYzRmKHBvdyhmcmFnbWVudE91dHB1dHMuY29sb3IucmdiLHZlYzNmKEdhbW1hRW5jb2RlUG93ZXJBcHByb3gpKSxmcmFnbWVudE91dHB1dHMuY29sb3IuYSk7fX1cbmA7XG4vLyBTaWRlZWZmZWN0XG5pZiAoIVNoYWRlclN0b3JlLlNoYWRlcnNTdG9yZVdHU0xbbmFtZV0pIHtcbiAgICBTaGFkZXJTdG9yZS5TaGFkZXJzU3RvcmVXR1NMW25hbWVdID0gc2hhZGVyO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGxvZEN1YmVQaXhlbFNoYWRlcldHU0wgPSB7IG5hbWUsIHNoYWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9kQ3ViZS5mcmFnbWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=