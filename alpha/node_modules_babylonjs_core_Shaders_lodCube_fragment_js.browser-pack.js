"use strict";
(self["webpackChunkab2ac"] = self["webpackChunkab2ac"] || []).push([["node_modules_babylonjs_core_Shaders_lodCube_fragment_js"],{

/***/ "./node_modules/@babylonjs/core/Shaders/lodCube.fragment.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babylonjs/core/Shaders/lodCube.fragment.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   lodCubePixelShader: () => (/* binding */ lodCubePixelShader)
/* harmony export */ });
/* harmony import */ var _Engines_shaderStore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Engines/shaderStore.js */ "./node_modules/@babylonjs/core/Engines/shaderStore.js");
// Do not edit.

const name = "lodCubePixelShader";
const shader = `precision highp float;const float GammaEncodePowerApprox=1.0/2.2;varying vec2 vUV;uniform samplerCube textureSampler;uniform float lod;uniform int gamma;void main(void)
{vec2 uv=vUV*2.0-1.0;
#ifdef POSITIVEX
gl_FragColor=textureCube(textureSampler,vec3(1.001,uv.y,uv.x),lod);
#endif
#ifdef NEGATIVEX
gl_FragColor=textureCube(textureSampler,vec3(-1.001,uv.y,uv.x),lod);
#endif
#ifdef POSITIVEY
gl_FragColor=textureCube(textureSampler,vec3(uv.y,1.001,uv.x),lod);
#endif
#ifdef NEGATIVEY
gl_FragColor=textureCube(textureSampler,vec3(uv.y,-1.001,uv.x),lod);
#endif
#ifdef POSITIVEZ
gl_FragColor=textureCube(textureSampler,vec3(uv,1.001),lod);
#endif
#ifdef NEGATIVEZ
gl_FragColor=textureCube(textureSampler,vec3(uv,-1.001),lod);
#endif
if (gamma==0) {gl_FragColor.rgb=pow(gl_FragColor.rgb,vec3(GammaEncodePowerApprox));}}
`;
// Sideeffect
if (!_Engines_shaderStore_js__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name]) {
    _Engines_shaderStore_js__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStore[name] = shader;
}
/** @internal */
const lodCubePixelShader = { name, shader };
//# sourceMappingURL=lodCube.fragment.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2JhYnlsb25qc19jb3JlX1NoYWRlcnNfbG9kQ3ViZV9mcmFnbWVudF9qcy5icm93c2VyLXBhY2suanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUN3RDtBQUN4RDtBQUNBLHNDQUFzQywyQ0FBMkMsaUJBQWlCLG1DQUFtQyxrQkFBa0Isa0JBQWtCO0FBQ3pLLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLEtBQUssZ0VBQVc7QUFDaEIsSUFBSSxnRUFBVztBQUNmO0FBQ0E7QUFDTyw2QkFBNkI7QUFDcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hYjJhYy8uL25vZGVfbW9kdWxlcy9AYmFieWxvbmpzL2NvcmUvU2hhZGVycy9sb2RDdWJlLmZyYWdtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIERvIG5vdCBlZGl0LlxuaW1wb3J0IHsgU2hhZGVyU3RvcmUgfSBmcm9tIFwiLi4vRW5naW5lcy9zaGFkZXJTdG9yZS5qc1wiO1xuY29uc3QgbmFtZSA9IFwibG9kQ3ViZVBpeGVsU2hhZGVyXCI7XG5jb25zdCBzaGFkZXIgPSBgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O2NvbnN0IGZsb2F0IEdhbW1hRW5jb2RlUG93ZXJBcHByb3g9MS4wLzIuMjt2YXJ5aW5nIHZlYzIgdlVWO3VuaWZvcm0gc2FtcGxlckN1YmUgdGV4dHVyZVNhbXBsZXI7dW5pZm9ybSBmbG9hdCBsb2Q7dW5pZm9ybSBpbnQgZ2FtbWE7dm9pZCBtYWluKHZvaWQpXG57dmVjMiB1dj12VVYqMi4wLTEuMDtcbiNpZmRlZiBQT1NJVElWRVhcbmdsX0ZyYWdDb2xvcj10ZXh0dXJlQ3ViZSh0ZXh0dXJlU2FtcGxlcix2ZWMzKDEuMDAxLHV2LnksdXYueCksbG9kKTtcbiNlbmRpZlxuI2lmZGVmIE5FR0FUSVZFWFxuZ2xfRnJhZ0NvbG9yPXRleHR1cmVDdWJlKHRleHR1cmVTYW1wbGVyLHZlYzMoLTEuMDAxLHV2LnksdXYueCksbG9kKTtcbiNlbmRpZlxuI2lmZGVmIFBPU0lUSVZFWVxuZ2xfRnJhZ0NvbG9yPXRleHR1cmVDdWJlKHRleHR1cmVTYW1wbGVyLHZlYzModXYueSwxLjAwMSx1di54KSxsb2QpO1xuI2VuZGlmXG4jaWZkZWYgTkVHQVRJVkVZXG5nbF9GcmFnQ29sb3I9dGV4dHVyZUN1YmUodGV4dHVyZVNhbXBsZXIsdmVjMyh1di55LC0xLjAwMSx1di54KSxsb2QpO1xuI2VuZGlmXG4jaWZkZWYgUE9TSVRJVkVaXG5nbF9GcmFnQ29sb3I9dGV4dHVyZUN1YmUodGV4dHVyZVNhbXBsZXIsdmVjMyh1diwxLjAwMSksbG9kKTtcbiNlbmRpZlxuI2lmZGVmIE5FR0FUSVZFWlxuZ2xfRnJhZ0NvbG9yPXRleHR1cmVDdWJlKHRleHR1cmVTYW1wbGVyLHZlYzModXYsLTEuMDAxKSxsb2QpO1xuI2VuZGlmXG5pZiAoZ2FtbWE9PTApIHtnbF9GcmFnQ29sb3IucmdiPXBvdyhnbF9GcmFnQ29sb3IucmdiLHZlYzMoR2FtbWFFbmNvZGVQb3dlckFwcHJveCkpO319XG5gO1xuLy8gU2lkZWVmZmVjdFxuaWYgKCFTaGFkZXJTdG9yZS5TaGFkZXJzU3RvcmVbbmFtZV0pIHtcbiAgICBTaGFkZXJTdG9yZS5TaGFkZXJzU3RvcmVbbmFtZV0gPSBzaGFkZXI7XG59XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgbG9kQ3ViZVBpeGVsU2hhZGVyID0geyBuYW1lLCBzaGFkZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZEN1YmUuZnJhZ21lbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9