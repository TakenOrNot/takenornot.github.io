"use strict";
(self["webpackChunkab2ac"] = self["webpackChunkab2ac"] || []).push([["node_modules_babylonjs_core_Materials_Textures_Loaders_ddsTextureLoader_js"],{

/***/ "./node_modules/@babylonjs/core/Materials/Textures/Loaders/ddsTextureLoader.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@babylonjs/core/Materials/Textures/Loaders/ddsTextureLoader.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _DDSTextureLoader: () => (/* binding */ _DDSTextureLoader)
/* harmony export */ });
/* harmony import */ var _Maths_sphericalPolynomial_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../Maths/sphericalPolynomial.js */ "./node_modules/@babylonjs/core/Maths/sphericalPolynomial.js");
/* harmony import */ var _Misc_dds_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../Misc/dds.js */ "./node_modules/@babylonjs/core/Misc/dds.js");


/**
 * Implementation of the DDS Texture Loader.
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
class _DDSTextureLoader {
    constructor() {
        /**
         * Defines whether the loader supports cascade loading the different faces.
         */
        this.supportCascades = true;
    }
    /**
     * Uploads the cube texture data to the WebGL texture. It has already been bound.
     * @param imgs contains the cube maps
     * @param texture defines the BabylonJS internal texture
     * @param createPolynomials will be true if polynomials have been requested
     * @param onLoad defines the callback to trigger once the texture is ready
     */
    loadCubeData(imgs, texture, createPolynomials, onLoad) {
        const engine = texture.getEngine();
        let info;
        let loadMipmap = false;
        let maxLevel = 1000;
        if (Array.isArray(imgs)) {
            for (let index = 0; index < imgs.length; index++) {
                const data = imgs[index];
                info = _Misc_dds_js__WEBPACK_IMPORTED_MODULE_1__.DDSTools.GetDDSInfo(data);
                texture.width = info.width;
                texture.height = info.height;
                loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;
                engine._unpackFlipY(info.isCompressed);
                _Misc_dds_js__WEBPACK_IMPORTED_MODULE_1__.DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6, -1, index);
                if (!info.isFourCC && info.mipmapCount === 1) {
                    engine.generateMipMapsForCubemap(texture);
                }
                else {
                    maxLevel = info.mipmapCount - 1;
                }
            }
        }
        else {
            const data = imgs;
            info = _Misc_dds_js__WEBPACK_IMPORTED_MODULE_1__.DDSTools.GetDDSInfo(data);
            texture.width = info.width;
            texture.height = info.height;
            if (createPolynomials) {
                info.sphericalPolynomial = new _Maths_sphericalPolynomial_js__WEBPACK_IMPORTED_MODULE_0__.SphericalPolynomial();
            }
            loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;
            engine._unpackFlipY(info.isCompressed);
            _Misc_dds_js__WEBPACK_IMPORTED_MODULE_1__.DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6);
            if (!info.isFourCC && info.mipmapCount === 1) {
                // Do not unbind as we still need to set the parameters.
                engine.generateMipMapsForCubemap(texture, false);
            }
            else {
                maxLevel = info.mipmapCount - 1;
            }
        }
        engine._setCubeMapTextureParams(texture, loadMipmap, maxLevel);
        texture.isReady = true;
        texture.onLoadedObservable.notifyObservers(texture);
        texture.onLoadedObservable.clear();
        if (onLoad) {
            onLoad({ isDDS: true, width: texture.width, info, data: imgs, texture });
        }
    }
    /**
     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.
     * @param data contains the texture data
     * @param texture defines the BabylonJS internal texture
     * @param callback defines the method to call once ready to upload
     */
    loadData(data, texture, callback) {
        const info = _Misc_dds_js__WEBPACK_IMPORTED_MODULE_1__.DDSTools.GetDDSInfo(data);
        const loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps && Math.max(info.width, info.height) >> (info.mipmapCount - 1) === 1;
        callback(info.width, info.height, loadMipmap, info.isFourCC, () => {
            _Misc_dds_js__WEBPACK_IMPORTED_MODULE_1__.DDSTools.UploadDDSLevels(texture.getEngine(), texture, data, info, loadMipmap, 1);
        });
    }
}
//# sourceMappingURL=ddsTextureLoader.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2JhYnlsb25qc19jb3JlX01hdGVyaWFsc19UZXh0dXJlc19Mb2FkZXJzX2Rkc1RleHR1cmVMb2FkZXJfanMuYnJvd3Nlci1wYWNrLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUE0RTtBQUM1QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxxQkFBcUI7QUFDckQ7QUFDQSx1QkFBdUIsa0RBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0RBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0RBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLDhFQUFtQjtBQUNsRTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtEQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDhEQUE4RDtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsa0RBQVE7QUFDN0I7QUFDQTtBQUNBLFlBQVksa0RBQVE7QUFDcEIsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FiMmFjLy4vbm9kZV9tb2R1bGVzL0BiYWJ5bG9uanMvY29yZS9NYXRlcmlhbHMvVGV4dHVyZXMvTG9hZGVycy9kZHNUZXh0dXJlTG9hZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNwaGVyaWNhbFBvbHlub21pYWwgfSBmcm9tIFwiLi4vLi4vLi4vTWF0aHMvc3BoZXJpY2FsUG9seW5vbWlhbC5qc1wiO1xuaW1wb3J0IHsgRERTVG9vbHMgfSBmcm9tIFwiLi4vLi4vLi4vTWlzYy9kZHMuanNcIjtcbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIEREUyBUZXh0dXJlIExvYWRlci5cbiAqIEBpbnRlcm5hbFxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgY2xhc3MgX0REU1RleHR1cmVMb2FkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBsb2FkZXIgc3VwcG9ydHMgY2FzY2FkZSBsb2FkaW5nIHRoZSBkaWZmZXJlbnQgZmFjZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN1cHBvcnRDYXNjYWRlcyA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwbG9hZHMgdGhlIGN1YmUgdGV4dHVyZSBkYXRhIHRvIHRoZSBXZWJHTCB0ZXh0dXJlLiBJdCBoYXMgYWxyZWFkeSBiZWVuIGJvdW5kLlxuICAgICAqIEBwYXJhbSBpbWdzIGNvbnRhaW5zIHRoZSBjdWJlIG1hcHNcbiAgICAgKiBAcGFyYW0gdGV4dHVyZSBkZWZpbmVzIHRoZSBCYWJ5bG9uSlMgaW50ZXJuYWwgdGV4dHVyZVxuICAgICAqIEBwYXJhbSBjcmVhdGVQb2x5bm9taWFscyB3aWxsIGJlIHRydWUgaWYgcG9seW5vbWlhbHMgaGF2ZSBiZWVuIHJlcXVlc3RlZFxuICAgICAqIEBwYXJhbSBvbkxvYWQgZGVmaW5lcyB0aGUgY2FsbGJhY2sgdG8gdHJpZ2dlciBvbmNlIHRoZSB0ZXh0dXJlIGlzIHJlYWR5XG4gICAgICovXG4gICAgbG9hZEN1YmVEYXRhKGltZ3MsIHRleHR1cmUsIGNyZWF0ZVBvbHlub21pYWxzLCBvbkxvYWQpIHtcbiAgICAgICAgY29uc3QgZW5naW5lID0gdGV4dHVyZS5nZXRFbmdpbmUoKTtcbiAgICAgICAgbGV0IGluZm87XG4gICAgICAgIGxldCBsb2FkTWlwbWFwID0gZmFsc2U7XG4gICAgICAgIGxldCBtYXhMZXZlbCA9IDEwMDA7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGltZ3MpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaW1ncy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gaW1nc1tpbmRleF07XG4gICAgICAgICAgICAgICAgaW5mbyA9IEREU1Rvb2xzLkdldEREU0luZm8oZGF0YSk7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS53aWR0aCA9IGluZm8ud2lkdGg7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5oZWlnaHQgPSBpbmZvLmhlaWdodDtcbiAgICAgICAgICAgICAgICBsb2FkTWlwbWFwID0gKGluZm8uaXNSR0IgfHwgaW5mby5pc0x1bWluYW5jZSB8fCBpbmZvLm1pcG1hcENvdW50ID4gMSkgJiYgdGV4dHVyZS5nZW5lcmF0ZU1pcE1hcHM7XG4gICAgICAgICAgICAgICAgZW5naW5lLl91bnBhY2tGbGlwWShpbmZvLmlzQ29tcHJlc3NlZCk7XG4gICAgICAgICAgICAgICAgRERTVG9vbHMuVXBsb2FkRERTTGV2ZWxzKGVuZ2luZSwgdGV4dHVyZSwgZGF0YSwgaW5mbywgbG9hZE1pcG1hcCwgNiwgLTEsIGluZGV4KTtcbiAgICAgICAgICAgICAgICBpZiAoIWluZm8uaXNGb3VyQ0MgJiYgaW5mby5taXBtYXBDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBlbmdpbmUuZ2VuZXJhdGVNaXBNYXBzRm9yQ3ViZW1hcCh0ZXh0dXJlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1heExldmVsID0gaW5mby5taXBtYXBDb3VudCAtIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGltZ3M7XG4gICAgICAgICAgICBpbmZvID0gRERTVG9vbHMuR2V0RERTSW5mbyhkYXRhKTtcbiAgICAgICAgICAgIHRleHR1cmUud2lkdGggPSBpbmZvLndpZHRoO1xuICAgICAgICAgICAgdGV4dHVyZS5oZWlnaHQgPSBpbmZvLmhlaWdodDtcbiAgICAgICAgICAgIGlmIChjcmVhdGVQb2x5bm9taWFscykge1xuICAgICAgICAgICAgICAgIGluZm8uc3BoZXJpY2FsUG9seW5vbWlhbCA9IG5ldyBTcGhlcmljYWxQb2x5bm9taWFsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2FkTWlwbWFwID0gKGluZm8uaXNSR0IgfHwgaW5mby5pc0x1bWluYW5jZSB8fCBpbmZvLm1pcG1hcENvdW50ID4gMSkgJiYgdGV4dHVyZS5nZW5lcmF0ZU1pcE1hcHM7XG4gICAgICAgICAgICBlbmdpbmUuX3VucGFja0ZsaXBZKGluZm8uaXNDb21wcmVzc2VkKTtcbiAgICAgICAgICAgIEREU1Rvb2xzLlVwbG9hZEREU0xldmVscyhlbmdpbmUsIHRleHR1cmUsIGRhdGEsIGluZm8sIGxvYWRNaXBtYXAsIDYpO1xuICAgICAgICAgICAgaWYgKCFpbmZvLmlzRm91ckNDICYmIGluZm8ubWlwbWFwQ291bnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBEbyBub3QgdW5iaW5kIGFzIHdlIHN0aWxsIG5lZWQgdG8gc2V0IHRoZSBwYXJhbWV0ZXJzLlxuICAgICAgICAgICAgICAgIGVuZ2luZS5nZW5lcmF0ZU1pcE1hcHNGb3JDdWJlbWFwKHRleHR1cmUsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1heExldmVsID0gaW5mby5taXBtYXBDb3VudCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZW5naW5lLl9zZXRDdWJlTWFwVGV4dHVyZVBhcmFtcyh0ZXh0dXJlLCBsb2FkTWlwbWFwLCBtYXhMZXZlbCk7XG4gICAgICAgIHRleHR1cmUuaXNSZWFkeSA9IHRydWU7XG4gICAgICAgIHRleHR1cmUub25Mb2FkZWRPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyh0ZXh0dXJlKTtcbiAgICAgICAgdGV4dHVyZS5vbkxvYWRlZE9ic2VydmFibGUuY2xlYXIoKTtcbiAgICAgICAgaWYgKG9uTG9hZCkge1xuICAgICAgICAgICAgb25Mb2FkKHsgaXNERFM6IHRydWUsIHdpZHRoOiB0ZXh0dXJlLndpZHRoLCBpbmZvLCBkYXRhOiBpbWdzLCB0ZXh0dXJlIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwbG9hZHMgdGhlIDJEIHRleHR1cmUgZGF0YSB0byB0aGUgV2ViR0wgdGV4dHVyZS4gSXQgaGFzIGFscmVhZHkgYmVlbiBib3VuZCBvbmNlIGluIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAcGFyYW0gZGF0YSBjb250YWlucyB0aGUgdGV4dHVyZSBkYXRhXG4gICAgICogQHBhcmFtIHRleHR1cmUgZGVmaW5lcyB0aGUgQmFieWxvbkpTIGludGVybmFsIHRleHR1cmVcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgZGVmaW5lcyB0aGUgbWV0aG9kIHRvIGNhbGwgb25jZSByZWFkeSB0byB1cGxvYWRcbiAgICAgKi9cbiAgICBsb2FkRGF0YShkYXRhLCB0ZXh0dXJlLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBpbmZvID0gRERTVG9vbHMuR2V0RERTSW5mbyhkYXRhKTtcbiAgICAgICAgY29uc3QgbG9hZE1pcG1hcCA9IChpbmZvLmlzUkdCIHx8IGluZm8uaXNMdW1pbmFuY2UgfHwgaW5mby5taXBtYXBDb3VudCA+IDEpICYmIHRleHR1cmUuZ2VuZXJhdGVNaXBNYXBzICYmIE1hdGgubWF4KGluZm8ud2lkdGgsIGluZm8uaGVpZ2h0KSA+PiAoaW5mby5taXBtYXBDb3VudCAtIDEpID09PSAxO1xuICAgICAgICBjYWxsYmFjayhpbmZvLndpZHRoLCBpbmZvLmhlaWdodCwgbG9hZE1pcG1hcCwgaW5mby5pc0ZvdXJDQywgKCkgPT4ge1xuICAgICAgICAgICAgRERTVG9vbHMuVXBsb2FkRERTTGV2ZWxzKHRleHR1cmUuZ2V0RW5naW5lKCksIHRleHR1cmUsIGRhdGEsIGluZm8sIGxvYWRNaXBtYXAsIDEpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZHNUZXh0dXJlTG9hZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==