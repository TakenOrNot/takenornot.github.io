"use strict";
(self["webpackChunkab2ac"] = self["webpackChunkab2ac"] || []).push([["node_modules_babylonjs_core_ShadersWGSL_lod_fragment_js"],{

/***/ "./node_modules/@babylonjs/core/ShadersWGSL/lod.fragment.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babylonjs/core/ShadersWGSL/lod.fragment.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   lodPixelShaderWGSL: () => (/* binding */ lodPixelShaderWGSL)
/* harmony export */ });
/* harmony import */ var _Engines_shaderStore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Engines/shaderStore.js */ "./node_modules/@babylonjs/core/Engines/shaderStore.js");
// Do not edit.

const name = "lodPixelShader";
const shader = `const GammaEncodePowerApprox=1.0/2.2;varying vUV: vec2f;var textureSamplerSampler: sampler;var textureSampler: texture_2d<f32>;uniform lod: f32;uniform gamma: i32;@fragment
fn main(input: FragmentInputs)->FragmentOutputs {fragmentOutputs.color=textureSampleLevel(textureSampler,textureSamplerSampler,fragmentInputs.vUV,uniforms.lod);if (uniforms.gamma==0) {fragmentOutputs.color=vec4f(pow(fragmentOutputs.color.rgb,vec3f(GammaEncodePowerApprox)),fragmentOutputs.color.a);}}
`;
// Sideeffect
if (!_Engines_shaderStore_js__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStoreWGSL[name]) {
    _Engines_shaderStore_js__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStoreWGSL[name] = shader;
}
/** @internal */
const lodPixelShaderWGSL = { name, shader };
//# sourceMappingURL=lod.fragment.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2JhYnlsb25qc19jb3JlX1NoYWRlcnNXR1NMX2xvZF9mcmFnbWVudF9qcy5icm93c2VyLXBhY2suanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUN3RDtBQUN4RDtBQUNBLHFEQUFxRCxtQkFBbUIsbUNBQW1DLG9DQUFvQyxpQkFBaUIsbUJBQW1CO0FBQ25MLGlEQUFpRCwrR0FBK0csd0JBQXdCO0FBQ3hMO0FBQ0E7QUFDQSxLQUFLLGdFQUFXO0FBQ2hCLElBQUksZ0VBQVc7QUFDZjtBQUNBO0FBQ08sNkJBQTZCO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWIyYWMvLi9ub2RlX21vZHVsZXMvQGJhYnlsb25qcy9jb3JlL1NoYWRlcnNXR1NML2xvZC5mcmFnbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEbyBub3QgZWRpdC5cbmltcG9ydCB7IFNoYWRlclN0b3JlIH0gZnJvbSBcIi4uL0VuZ2luZXMvc2hhZGVyU3RvcmUuanNcIjtcbmNvbnN0IG5hbWUgPSBcImxvZFBpeGVsU2hhZGVyXCI7XG5jb25zdCBzaGFkZXIgPSBgY29uc3QgR2FtbWFFbmNvZGVQb3dlckFwcHJveD0xLjAvMi4yO3ZhcnlpbmcgdlVWOiB2ZWMyZjt2YXIgdGV4dHVyZVNhbXBsZXJTYW1wbGVyOiBzYW1wbGVyO3ZhciB0ZXh0dXJlU2FtcGxlcjogdGV4dHVyZV8yZDxmMzI+O3VuaWZvcm0gbG9kOiBmMzI7dW5pZm9ybSBnYW1tYTogaTMyO0BmcmFnbWVudFxuZm4gbWFpbihpbnB1dDogRnJhZ21lbnRJbnB1dHMpLT5GcmFnbWVudE91dHB1dHMge2ZyYWdtZW50T3V0cHV0cy5jb2xvcj10ZXh0dXJlU2FtcGxlTGV2ZWwodGV4dHVyZVNhbXBsZXIsdGV4dHVyZVNhbXBsZXJTYW1wbGVyLGZyYWdtZW50SW5wdXRzLnZVVix1bmlmb3Jtcy5sb2QpO2lmICh1bmlmb3Jtcy5nYW1tYT09MCkge2ZyYWdtZW50T3V0cHV0cy5jb2xvcj12ZWM0Zihwb3coZnJhZ21lbnRPdXRwdXRzLmNvbG9yLnJnYix2ZWMzZihHYW1tYUVuY29kZVBvd2VyQXBwcm94KSksZnJhZ21lbnRPdXRwdXRzLmNvbG9yLmEpO319XG5gO1xuLy8gU2lkZWVmZmVjdFxuaWYgKCFTaGFkZXJTdG9yZS5TaGFkZXJzU3RvcmVXR1NMW25hbWVdKSB7XG4gICAgU2hhZGVyU3RvcmUuU2hhZGVyc1N0b3JlV0dTTFtuYW1lXSA9IHNoYWRlcjtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBsb2RQaXhlbFNoYWRlcldHU0wgPSB7IG5hbWUsIHNoYWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9kLmZyYWdtZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==